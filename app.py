# app.py  (Flask + SQLAlchemy + Telegram buttons)
# –ò–Ω–¥–µ–Ω—Ç–∞—Ü–∏—è —Å—Ç—Ä–æ–≥–æ 4 –ø—Ä–æ–±–µ–ª–∞, –±–µ–∑ —Ç–∞–±–æ–≤.

import os
import json
import logging
from datetime import datetime, timedelta, timezone

import requests
from dateutil import tz
from flask import Flask, request, jsonify
from flask_cors import CORS
from flask_sqlalchemy import SQLAlchemy

# -----------------------------------------------------------------------------
# –ö–æ–Ω—Ñ–∏–≥
# -----------------------------------------------------------------------------
app = Flask(__name__)
CORS(app, resources={r"/api/*": {"origins": os.getenv("CORS_ORIGIN", "*")}})

# –ë–î (Neon). –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä–∞–π–≤–µ—Ä psycopg (v3), —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å Python 3.13
DATABASE_URL = os.getenv("DATABASE_URL", "").strip()
if not DATABASE_URL:
    raise RuntimeError("DATABASE_URL is not set")

if DATABASE_URL.startswith("postgres://"):
    DATABASE_URL = DATABASE_URL.replace("postgres://", "postgresql+psycopg://", 1)
elif DATABASE_URL.startswith("postgresql://") and "+psycopg" not in DATABASE_URL and "+psycopg2" not in DATABASE_URL:
    DATABASE_URL = DATABASE_URL.replace("postgresql://", "postgresql+psycopg://", 1)

app.config["SQLALCHEMY_DATABASE_URI"] = DATABASE_URL
app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False

db = SQLAlchemy(app)

# Telegram
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
TELEGRAM_CHAT_ID = (os.getenv("TELEGRAM_CHAT_ID", "") or "").strip()  # –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º
TELEGRAM_WEBHOOK_SECRET = (os.getenv("TELEGRAM_WEBHOOK_SECRET", "") or "").strip()

# Cron
CRON_SECRET = (os.getenv("CRON_SECRET", "") or "").strip()
REMIND_EVERY_SEC = int(os.getenv("REMIND_EVERY_SEC", "14400"))  # 4 —á–∞—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –õ–æ–∫–∞–ª—å–Ω–∞—è —Ç–∞–π–º–∑–æ–Ω–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ê–ª–º–∞—Ç—ã)
KZ_TZ = tz.gettz("Asia/Almaty")

logging.basicConfig(level=logging.INFO)
logger = app.logger


# -----------------------------------------------------------------------------
# –ú–æ–¥–µ–ª—å
# -----------------------------------------------------------------------------
class Ticket(db.Model):
    __tablename__ = "tickets"
    id = db.Column(db.Integer, primary_key=True)
    club = db.Column(db.String(50), nullable=False)
    pc = db.Column(db.String(50), nullable=True)
    description = db.Column(db.Text, nullable=False)
    status = db.Column(db.String(20), nullable=False, default="new")  # new | in_progress | done
    deadline_at = db.Column(db.DateTime, nullable=True)
    created_at = db.Column(db.DateTime, nullable=False, default=lambda: datetime.now(timezone.utc))
    updated_at = db.Column(db.DateTime, nullable=False, default=lambda: datetime.now(timezone.utc))

    # –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
    tg_chat_id = db.Column(db.BigInteger, nullable=True)
    tg_message_id = db.Column(db.BigInteger, nullable=True)

    def to_dict(self):
        return {
            "id": self.id,
            "club": self.club,
            "pc": self.pc,
            "description": self.description,
            "status": self.status,
            "deadline_at": self.deadline_at.astimezone(KZ_TZ).isoformat() if self.deadline_at else None,
            "created_at": self.created_at.astimezone(KZ_TZ).isoformat() if self.created_at else None,
            "updated_at": self.updated_at.astimezone(KZ_TZ).isoformat() if self.updated_at else None,
        }


with app.app_context():
    db.create_all()


# -----------------------------------------------------------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ
# -----------------------------------------------------------------------------
def now_utc():
    return datetime.now(timezone.utc)


def fmt_deadline(dt_utc: datetime | None) -> str:
    if not dt_utc:
        return "‚Äî"
    local = dt_utc.astimezone(KZ_TZ)
    left = dt_utc - now_utc()
    # –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ ¬´–æ—Å—Ç–∞–ª–æ—Å—å/–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ¬ª
    if left.total_seconds() >= 0:
        # –æ—Å—Ç–∞–ª–æ—Å—å
        hrs = int(left.total_seconds() // 3600)
        mins = int((left.total_seconds() % 3600) // 60)
        left_str = f"—á–µ—Ä–µ–∑ {hrs}—á {mins}–º" if hrs else f"—á–µ—Ä–µ–∑ {mins}–º"
    else:
        left = -left
        hrs = int(left.total_seconds() // 3600)
        mins = int((left.total_seconds() % 3600) // 60)
        left_str = f"–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ {hrs}—á {mins}–º" if hrs else f"–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ {mins}–º"
    return f"{local.strftime('%d.%m %H:%M')} ({left_str})"


def status_human(s: str) -> str:
    return {"new": "üÜï –ù–æ–≤–∞—è", "in_progress": "üîÑ –í —Ä–∞–±–æ—Ç–µ", "done": "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ"}.get(s, s)


def build_keyboard(t: Ticket):
    # –î–≤–µ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ + —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—é
    return {
        "inline_keyboard": [
            [
                {"text": "üîÑ –í —Ä–∞–±–æ—Ç–µ", "callback_data": f"status:{t.id}:in_progress"},
                {"text": "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", "callback_data": f"status:{t.id}:done"},
            ],
            [
                {"text": "üóí –ò—Å—Ç–æ—Ä–∏—è", "url": "https://pyatak.onrender.com/history.html"}
            ]
        ]
    }


def msg_ticket_text(t: Ticket, title: str = "–ó–∞—è–≤–∫–∞") -> str:
    return (
        f"<b>{title}</b>\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_human(t.status)}\n"
        f"<b>ID:</b> <code>{t.id}</code>\n"
        f"<b>–ö–ª—É–±:</b> {t.club}\n"
        f"<b>–ü–ö:</b> {t.pc or '‚Äî'}\n"
        f"<b>–î–µ–¥–ª–∞–π–Ω:</b> {fmt_deadline(t.deadline_at)}\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{(t.description or '').strip()}"
    )


def tg_api(method: str, payload: dict):
    if not TELEGRAM_BOT_TOKEN:
        return None
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/{method}"
    try:
        r = requests.post(url, json=payload, timeout=10)
        if r.status_code != 200:
            logger.warning("Telegram API %s -> %s %s", method, r.status_code, r.text[:400])
        return r.json() if r.headers.get("content-type", "").startswith("application/json") else r.text
    except Exception as e:
        logger.exception("Telegram API error: %s", e)
        return None


def send_ticket_to_tg(t: Ticket):
    if not TELEGRAM_BOT_TOKEN:
        return
    # –µ—Å–ª–∏ TELEGRAM_CHAT_ID –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º —Ç—É–¥–∞, –≥–¥–µ –ø–æ–∑–∂–µ –Ω–∞–∂–º—É—Ç –∫–Ω–æ–ø–∫—É; –Ω–æ –ª—É—á—à–µ —É–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–æ–≤–æ–π id
    chat_id = int(TELEGRAM_CHAT_ID) if TELEGRAM_CHAT_ID.isdigit() else TELEGRAM_CHAT_ID or None
    if not chat_id:
        # –Ω–µ—Ç —á–∞—Ç–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º
        return
    res = tg_api("sendMessage", {
        "chat_id": chat_id,
        "text": msg_ticket_text(t, "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞"),
        "parse_mode": "HTML",
        "reply_markup": build_keyboard(t),
        "disable_web_page_preview": True
    })
    try:
        if isinstance(res, dict) and res.get("ok") and res.get("result"):
            t.tg_chat_id = res["result"]["chat"]["id"]
            t.tg_message_id = res["result"]["message_id"]
            db.session.commit()
    except Exception:
        logger.exception("Failed to save tg message id")


def edit_ticket_message_in_tg(t: Ticket, title: str = "–ó–∞—è–≤–∫–∞"):
    if not TELEGRAM_BOT_TOKEN or not t.tg_chat_id or not t.tg_message_id:
        return
    tg_api("editMessageText", {
        "chat_id": t.tg_chat_id,
        "message_id": t.tg_message_id,
        "text": msg_ticket_text(t, title),
        "parse_mode": "HTML",
        "reply_markup": build_keyboard(t),
        "disable_web_page_preview": True
    })


def _chat_allowed(chat: dict) -> bool:
    """
    –ü—É—Å–∫–∞–µ–º –∞–ø–¥–µ–π—Ç—ã, –µ—Å–ª–∏ TELEGRAM_CHAT_ID –ø—É—Å—Ç,
    –ª–∏–±–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —á–∏—Å–ª–æ–≤—ã–º id, –ª–∏–±–æ —Å @username, –ª–∏–±–æ —Å title –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞.
    """
    expected = TELEGRAM_CHAT_ID
    if not expected:
        return True
    cid = str(chat.get("id", ""))
    uname = chat.get("username")  # –±–µ–∑ @
    title = chat.get("title")
    variants = {cid}
    if uname:
        variants.add(f"@{uname}")
    if title:
        variants.add(title)
    return expected in variants


# -----------------------------------------------------------------------------
# API
# -----------------------------------------------------------------------------
@app.get("/health")
def health():
    return "ok", 200


@app.get("/api/tickets")
def list_tickets():
    q = Ticket.query.order_by(Ticket.created_at.desc()).all()
    return jsonify([t.to_dict() for t in q])


@app.post("/api/tickets")
def create_ticket():
    data = request.get_json(force=True) or {}
    club = (data.get("club") or "").strip()
    pc = (data.get("pc") or "").strip()
    description = (data.get("description") or "").strip()
    due = (data.get("due") or "").strip()  # today|tomorrow|3days (—Å —Ñ—Ä–æ–Ω—Ç–∞)

    if not club or not description:
        return jsonify({"error": "club –∏ description –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"}), 400

    # –¥–µ–¥–ª–∞–π–Ω
    deadline = None
    if due == "today":
        deadline = now_utc().astimezone(KZ_TZ).replace(hour=23, minute=59, second=0, microsecond=0).astimezone(timezone.utc)
    elif due == "tomorrow":
        local = now_utc().astimezone(KZ_TZ) + timedelta(days=1)
        deadline = local.replace(hour=23, minute=59, second=0, microsecond=0).astimezone(timezone.utc)
    elif due == "3days":
        local = now_utc().astimezone(KZ_TZ) + timedelta(days=3)
        deadline = local.replace(hour=23, minute=59, second=0, microsecond=0).astimezone(timezone.utc)

    t = Ticket(
        club=club,
        pc=pc or None,
        description=description,
        status="new",
        deadline_at=deadline
    )
    db.session.add(t)
    db.session.commit()

    # –æ—Ç–ø—Ä–∞–≤–∏–º –≤ Telegram
    send_ticket_to_tg(t)

    return jsonify(t.to_dict()), 201


@app.post("/api/tickets/<int:sid>/status")
def set_status(sid: int):
    data = request.get_json(force=True) or {}
    new_status = (data.get("status") or "").strip()
    if new_status not in ("new", "in_progress", "done"):
        return jsonify({"error": "status –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: new|in_progress|done"}), 400

    t = db.session.get(Ticket, sid)
    if not t:
        return jsonify({"error": "not found"}), 404

    t.status = new_status
    t.updated_at = now_utc()
    db.session.commit()

    # –µ—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –æ–±–Ω–æ–≤–∏–º –∫–∞—Ä—Ç–æ—á–∫—É
    edit_ticket_message_in_tg(t)

    return jsonify(t.to_dict())


# -----------------------------------------------------------------------------
# Telegram webhook
# -----------------------------------------------------------------------------
@app.post("/telegram/webhook")
def telegram_webhook():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    recv = request.headers.get("X-Telegram-Bot-Api-Secret-Token", "")
    if TELEGRAM_WEBHOOK_SECRET and recv != TELEGRAM_WEBHOOK_SECRET:
        return "forbidden", 403

    upd = request.get_json(force=True) or {}
    logger.info("tg update: %s", json.dumps(upd)[:1000])

    # –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∫–æ–º–∞–Ω–¥—ã)
    msg = upd.get("message")
    if msg:
        chat = msg.get("chat", {}) or {}
        if not _chat_allowed(chat):
            return "ok"

        chat_id = chat.get("id")
        text_in = (msg.get("text") or "").strip()

        # /start /help
        if text_in in ("/start", "/help"):
            tg_api("sendMessage", {
                "chat_id": chat_id,
                "parse_mode": "HTML",
                "text": (
                    "<b>–ü—è—Ç–∞–∫ ‚Äî –∑–∞—è–≤–∫–∏</b>\n"
                    "–Ø –ø—Ä–∏—Å—ã–ª–∞—é –∑–∞—è–≤–∫–∏ –∏ –º–µ–Ω—è—é —Å—Ç–∞—Ç—É—Å—ã –ø–æ –∫–Ω–æ–ø–∫–∞–º.\n\n"
                    "<b>–ö–æ–º–∞–Ω–¥—ã</b>:\n"
                    "‚Ä¢ /id ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à chat_id\n"
                    "‚Ä¢ /work &lt;ID&gt; ‚Äî —Å—Ç–∞—Ç—É—Å ¬´–í —Ä–∞–±–æ—Ç–µ¬ª\n"
                    "‚Ä¢ /done &lt;ID&gt; ‚Äî —Å—Ç–∞—Ç—É—Å ¬´–í—ã–ø–æ–ª–Ω–µ–Ω–æ¬ª"
                )
            })
            return "ok"

        # /id ‚Äî —É–∑–Ω–∞—Ç—å —Å–≤–æ–π chat_id
        if text_in == "/id":
            tg_api("sendMessage", {
                "chat_id": chat_id,
                "text": f"–í–∞—à chat_id: <code>{chat_id}</code>",
                "parse_mode": "HTML"
            })
            return "ok"

        # /done <ID> ‚Äî —Å—Ç–∞—Ç—É—Å ‚Üí –í—ã–ø–æ–ª–Ω–µ–Ω–æ
        if text_in.startswith("/done"):
            parts = text_in.split()
            if len(parts) == 2 and parts[1].isdigit():
                sid = int(parts[1])
                t = db.session.get(Ticket, sid)
                if not t:
                    tg_api("sendMessage", {"chat_id": chat_id, "text": f"ID {sid} –Ω–µ –Ω–∞–π–¥–µ–Ω"})
                else:
                    t.status = "done"
                    t.updated_at = now_utc()
                    db.session.commit()
                    edit_ticket_message_in_tg(t, "–ó–∞—è–≤–∫–∞")
                    tg_api("sendMessage", {"chat_id": chat_id, "text": f"–ó–∞—è–≤–∫–∞ {sid}: —Å—Ç–∞—Ç—É—Å ‚Üí –í—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ"})
            else:
                tg_api("sendMessage", {"chat_id": chat_id, "text": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /done <ID>"})
            return "ok"

        # /work <ID> ‚Äî —Å—Ç–∞—Ç—É—Å ‚Üí –í —Ä–∞–±–æ—Ç–µ
        if text_in.startswith("/work"):
            parts = text_in.split()
            if len(parts) == 2 and parts[1].isdigit():
                sid = int(parts[1])
                t = db.session.get(Ticket, sid)
                if not t:
                    tg_api("sendMessage", {"chat_id": chat_id, "text": f"ID {sid} –Ω–µ –Ω–∞–π–¥–µ–Ω"})
                else:
                    t.status = "in_progress"
                    t.updated_at = now_utc()
                    db.session.commit()
                    edit_ticket_message_in_tg(t, "–ó–∞—è–≤–∫–∞")
                    tg_api("sendMessage", {"chat_id": chat_id, "text": f"–ó–∞—è–≤–∫–∞ {sid}: —Å—Ç–∞—Ç—É—Å ‚Üí –í —Ä–∞–±–æ—Ç–µ üîÑ"})
            else:
                tg_api("sendMessage", {"chat_id": chat_id, "text": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /work <ID>"})
            return "ok"

        return "ok"

    # –ù–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
    cq = upd.get("callback_query")
    if cq:
        cb_id = cq.get("id")
        message = cq.get("message") or {}
        chat = message.get("chat") or {}
        if not _chat_allowed(chat):
            tg_api("answerCallbackQuery", {"callback_query_id": cb_id, "text": "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"})
            return "ok"

        data = cq.get("data") or ""
        chat_id = chat.get("id")
        message_id = message.get("message_id")

        if not data.startswith("status:"):
            tg_api("answerCallbackQuery", {"callback_query_id": cb_id, "text": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"})
            return "ok"

        try:
            _, sid, new_status = data.split(":", 2)
            sid = int(sid)
        except Exception:
            tg_api("answerCallbackQuery", {"callback_query_id": cb_id, "text": "–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö"})
            return "ok"

        if new_status not in ("in_progress", "done"):
            tg_api("answerCallbackQuery", {"callback_query_id": cb_id, "text": "–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å"})
            return "ok"

        t = db.session.get(Ticket, sid)
        if not t:
            tg_api("answerCallbackQuery", {"callback_query_id": cb_id, "text": "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})
            return "ok"

        t.status = new_status
        t.updated_at = now_utc()
        db.session.commit()

        # –≤—Å–ø–ª—ã–≤–∞—à–∫–∞
        human = {"in_progress": "–í —Ä–∞–±–æ—Ç–µ", "done": "–í—ã–ø–æ–ª–Ω–µ–Ω–æ"}[new_status]
        tg_api("answerCallbackQuery", {"callback_query_id": cb_id, "text": f"–°—Ç–∞—Ç—É—Å: {human}"})

        # –ø—Ä–∞–≤–∏–º –∫–∞—Ä—Ç–æ—á–∫—É ‚Äî –µ—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å message_id –æ—Ç –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if not t.tg_chat_id:
            t.tg_chat_id = chat_id
        if not t.tg_message_id:
            t.tg_message_id = message_id
        edit_ticket_message_in_tg(t, "–ó–∞—è–≤–∫–∞")

        return "ok"

    return "ok"


# -----------------------------------------------------------------------------
# –ö—Ä–æ–Ω-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–ø—Ä–æ–≥—Ä–µ–≤ –∏ –¥–æ–∂–∏–º)
# -----------------------------------------------------------------------------
@app.get("/cron/remind")
def cron_remind():
    # –ø—Ä–æ—Å—Ç–∞—è –∑–∞—â–∏—Ç–∞
    if CRON_SECRET:
        recv = request.headers.get("X-Cron-Secret", "")
        if recv != CRON_SECRET:
            return "forbidden", 403

    # —à–ª—ë–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –≤—Å–µ–º —Ç–∏–∫–µ—Ç–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ done
    # ‚Ä¢ –µ—Å–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω—ã ‚Äî –∫–∞–∂–¥—ã–µ REMIND_EVERY_SEC
    # ‚Ä¢ –µ—Å–ª–∏ —Å–∫–æ—Ä–æ –¥–µ–¥–ª–∞–π–Ω (< 3 —á–∞—Å–æ–≤) ‚Äî –Ω–∞–ø–æ–º–Ω–∏—Ç—å —Ä–∞–∑–æ–≤–æ
    now = now_utc()
    soon = now + timedelta(hours=3)

    rows = Ticket.query.filter(Ticket.status != "done").order_by(Ticket.created_at.asc()).all()
    sent = 0
    for t in rows:
        need = False
        title = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"

        if t.deadline_at:
            if t.deadline_at < now:
                # –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ ‚Äî –ø–∏–Ω–≥—É–µ–º –≤—Å–µ–≥–¥–∞
                need = True
                title = "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ"
            elif t.deadline_at < soon:
                need = True
                title = "–°–∫–æ—Ä–æ –¥–µ–¥–ª–∞–π–Ω"

        if need:
            # –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏ –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É)
            edit_ticket_message_in_tg(t, "–ó–∞—è–≤–∫–∞")  # –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫–∞—Ä—Ç–æ—á–∫—É –∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º—É –≤–∏–¥—É
            send_ticket_to_tg(t)
            sent += 1

    return jsonify({"ok": True, "sent": sent})


# -----------------------------------------------------------------------------
# –ó–∞–ø—É—Å–∫ –ø–æ–¥ gunicorn (–Ω–∞ Render —ç—Ç–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è —è–≤–Ω–æ)
# -----------------------------------------------------------------------------
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", "5000")))
